# Generated by Django 4.2.7 on 2023-12-12 11:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quality', models.CharField(choices=[('unique', 'Unique'), ('strange', 'Strange'), ('vintage', 'Vintage'), ('unusual', 'Unusual'), ('genuine', 'Genuine'), ('decorated', 'Decorated'), ('haunted', 'Haunted'), ('collectors', 'Collectors'), ('normal', 'Normal')], max_length=20)),
                ('item_name', models.CharField(max_length=150)),
                ('craftable', models.BooleanField(default=True)),
                ('australium', models.BooleanField(default=False)),
                ('texture_name', models.CharField(blank=True, max_length=64, null=True)),
                ('wear', models.CharField(choices=[('factory_new', 'Factory New'), ('minimal_wear', 'Minimal Wear'), ('field_tested', 'Field-Tested'), ('well_worn', 'Well-Worn'), ('battle_scarred', 'Battle Scarred')], max_length=20)),
                ('particle_effect', models.CharField(max_length=64)),
                ('description', models.TextField(blank=True, max_length=400, null=True)),
                ('killstreak', models.CharField(blank=True, choices=[('standard', 'Standard'), ('specialized', 'Specialized'), ('professional', 'Professional')], max_length=20, null=True)),
                ('image_url', models.URLField(blank=True, max_length=400, null=True)),
                ('owner', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='listings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Transactions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('buy', 'Buy'), ('sale', 'Sale')], max_length=4)),
                ('description', models.TextField(blank=True, max_length=400, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('items_bought', models.ManyToManyField(blank=True, related_name='buys_transactions', to='tf2folio.item')),
                ('items_sold', models.ManyToManyField(blank=True, related_name='sales_transactions', to='tf2folio.item')),
                ('owner', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='user_transactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='items',
            field=models.ManyToManyField(blank=True, related_name='item_owner', to='tf2folio.item'),
        ),
        migrations.AddField(
            model_name='user',
            name='transactions',
            field=models.ManyToManyField(blank=True, related_name='transaction_owner', to='tf2folio.transactions'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
